
"Replay last macro by typing enter
nnoremap <Enter> @@
if has('nvim')
   "Using xclip for better clipboard integration:
   "https://github.com/neovim/neovim/issues/6097
    set clipboard+=unnamedplus
    let g:os = substitute(system('uname -a'), '\n', '', '')
    if g:os =~ "Microsoft"
       "WSL detected, we need to do some weirdness to interact
       " with the system clipboard ...
       "Figured this out by looking at this:
       " https://github.com/neovim/neovim/blob/master/runtime/autoload/provider/clipboard.vim
       let g:clipboard = {
             \   'name': 'myClipboard',
             \   'copy': {
             \      '+': 'nvimCopy.sh',
             \      '*': 'nvimCopy.sh',
             \    },
             \   'paste': {
             \      '+': "nvimPaste.sh",
             \      '-': "nvimPaste.sh",
             \   },
             \   'cache_enabled': 1,
             \ }
    else
       if executable('xclip') == 1
          " This is faster than the default xsel for linux
          " Loopks like this is the default in newer version of neovim:
          " https://github.com/neovim/neovim/pull/9302
          let g:clipboard = {
             \   'name': 'fast_xclip',
             \   'copy': {
             \      '+': 'xclip -quiet -i -selection clipboard',
             \      '*': 'xclip -quiet -i -selection clipboard',
             \    },
             \   'paste': {
             \      '+': 'xclip -o -selection clipboard',
             \      '-': 'xclip -o -selection clipboard',
             \   },
             \   'cache_enabled': 1,
             \ }
       endif
    endif

    "Use Escape to exit terminal "insert" mode
    tnoremap <Esc> <C-\><C-n>

    "Meta-[ will send escape to terminal
    tnoremap <M-[> <Esc>
endif

"The Mozilla style is a pretty sane fallback if .clang-format
" DNE in the working dir
let g:clang_format_fallback_style = 'Mozilla'
vmap <C-Y> :py3f ~/.vim/clang-format.py<cr>

"Universal reformatting (uses the vim-autoformat plugin), will
" call into clang-format for C/C++, autopep8 for python, etc.
vmap <C-U> :Autoformat<CR>

"https://superuser.com/questions/77800/vims-autocomplete-how-to-prevent-vim-to-read-some-include-files
set include=^\\s*#\\s*include\ \\(<boost/\\)\\@!

"Higher contrast colorscheme
" colorscheme darkblue
" colorscheme murphy "too green
" colorscheme wombat "sucks with python
colorscheme inkpot

"Limit the control-p scanned files (otherwise vim can hang)
let g:ctrlp_max_files = 10000
" Set the MRU option as the default ctrl-p mode
let g:ctrlp_cmd = 'CtrlPMRU'

" Open files in the current pane
let g:ctrlp_reuse_window = 'nerdtree'
let g:ctrlp_switch_buffer = ''

" https://github.com/scrooloose/nerdtree/issues/250
let NERDTreeCreatePrefix='silent keepalt keepjumps'

"Remove hard-to-read highlights
" hi clear SpellBad
" " SpellBad cterm=underline  ctermfg=red
" hi SpellBad cterm=underline

"""""""""""""""""""""""""""""""""""""""""
"YouCompleteMe shortcuts
nnoremap <leader>jj :YcmCompleter GoTo<CR>
nnoremap <leader>ji :YcmCompleter GoToInclude<CR>
" GotoDefinition doesn't work if the definition is in a different
" translation unit (which makes it pretty useless):
" https://github.com/Valloric/YouCompleteMe/issues/2448
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jt :YcmCompleter GetType<CR>
nnoremap <leader>jp :YcmCompleter GetParent<CR>
nnoremap <leader>jD :YcmCompleter GetDoc<CR>
nnoremap <leader>jF :YcmCompleter FixIt<CR>
"Not available in C/C++ :(
nnoremap <leader>jr :YcmCompleter GoToReferences<CR>

"Showing diagnostic list in "location-list"
" :YcmDiag
"This doesn't work so well with boost :(
"For now dont show errors that YCM finds
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_autoclose_preview_window_after_completion = 1
"""""""""""""""""""""""""""""""""""""""""

"Shortcut to "git grep" a word
nmap <C-\>\ :Ggrep <C-R>=expand("<cword>")<CR><CR>

set textwidth=110
